services:
  prometheus:
    image: prom/prometheus:v3.4.2
    container_name: prometheus
    restart: unless-stopped
    networks:
      - "{{ docker_network }}"
    volumes:
      - "{{ config_dir }}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time={{ services.prometheus.retention }}'
    deploy:
      resources:
        limits:
          cpus: "{{ services.prometheus.cpu_limit }}"
          memory: "{{ services.prometheus.memory_limit }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`{{ subdomains.prometheus }}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana
    restart: unless-stopped
    networks:
      - "{{ docker_network }}"
    volumes:
      - grafana_data:/var/lib/grafana
      - "{{ config_dir }}/grafana/grafana.ini:/etc/grafana/grafana.ini:ro"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD={{ grafana_admin_password }}
    deploy:
      resources:
        limits:
          cpus: "{{ services.grafana.cpu_limit }}"
          memory: "{{ services.grafana.memory_limit }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`{{ subdomains.grafana }}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  loki:
    image: grafana/loki:3.5.2
    container_name: loki
    restart: unless-stopped
    networks:
      - "{{ docker_network }}"
    volumes:
      - loki_data:/loki
      - "{{ config_dir }}/loki/loki.yml:/etc/loki/config.yml:ro"
    command: -config.file=/etc/loki/config.yml
    deploy:
      resources:
        limits:
          cpus: "{{ services.loki.cpu_limit }}"
          memory: "{{ services.loki.memory_limit }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.loki.rule=Host(`loki.{{ domain }}`)"
      - "traefik.http.routers.loki.entrypoints=websecure"
      - "traefik.http.routers.loki.tls.certresolver=letsencrypt"
      - "traefik.http.services.loki.loadbalancer.server.port=3100"

  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager
    restart: unless-stopped
    networks:
      - "{{ docker_network }}"
    volumes:
      - alertmanager_data:/alertmanager
      - "{{ config_dir }}/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro"
    command: --config.file=/etc/alertmanager/alertmanager.yml --storage.path=/alertmanager
    deploy:
      resources:
        limits:
          cpus: "{{ services.alertmanager.cpu_limit }}"
          memory: "{{ services.alertmanager.memory_limit }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`{{ subdomains.alertmanager }}`)"
      - "traefik.http.routers.alertmanager.entrypoints=websecure"
      - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

networks:
  "{{ docker_network }}":
    external: true

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  alertmanager_data:
